---
name: build & Verify golang Module
on:
  workflow_call:
    inputs:
      runs-on:
        required: true
        type: string
      module-name:
        required: true
        type: string
      golint-version:
        default: v1.61.0-alpine
        required: true
        type: string
      golang-version:
        default: 1.23.1
        required: true
        type: string
      timeout-minutes:
        default: 10m
        required: false
        type: string
      environment-name:
        default: k8s
        required: true
        type: string
      accept-linterrors:
        default: false
        required: true
        type: boolean
      accept-failedtests:
        default: false
        required: true
        type: boolean

jobs:
  Lint-Go:
    runs-on: ${{ inputs.runs-on }}
    container:
      image: golangci/golangci-lint:${{ inputs.golint-version }}
    environment: ${{ inputs.environment-name }}
    continue-on-error: ${{ inputs.accept-linterrors }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Lint golang code
        run: |
          golangci-lint run --timeout=${{ inputs.timeout-minutes }}

  Test-Go:
    runs-on: ${{ inputs.runs-on }}
    container:
      image: golang:${{ inputs.golang-version }}
    environment: ${{ inputs.environment-name }}
    continue-on-error: ${{ inputs.accept-failedtests }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Set homerun defaults
        run: |
          echo "SEVERITY=ERROR" >> $GITHUB_ENV
          echo "Start Time: $(date +%s)" && echo "start=$(date +%s)" >> $GITHUB_ENV

      - name: Test code
        run: |
          go mod tidy
          go test ./... -v

      - name: Set homerun values
        run: |
          duration=$(($(date +%s) - start))
          echo "TEST_TIME=$(echo $duration)" >> $GITHUB_ENV
          echo $duration
        env:
          start: ${{ env.start }}

      - name: Send Message To Homerun
        if: always()
        uses: stuttgart-things/github-workflow-templates/actions/send-homerun-message@main
        with:
          url: "https://homerun.homerun-dev.sthings-vsphere.labul.sva.de/generic"
          secretToken: "${{ secrets.HOMERUN_TOKEN }}"
          title: "${{ inputs.module-name }} golang test"
          message: "${{ inputs.module-name }} golang test TEST-TIME: ${TEST_TIME} seconds REPO: https://github.com/${GITHUB_REPOSITORY}/"
          severity: "${{ env.SEVERITY }}"
          artifacts: "${{ inputs.module-name }}"
          tags: "github,${{ inputs.module-name }},golang,test"
          assigneeName: "${GITHUB_ACTOR}"

  build-Go:
    runs-on: ${{ inputs.runs-on }}
    container:
      image: golang:${{ inputs.golang-version }}
    environment: ${{ inputs.environment-name }}
    continue-on-error: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Set homerun defaults
        run: |
          echo "SEVERITY=ERROR" >> $GITHUB_ENV
          echo "STATUS=FAILED" >> $GITHUB_ENV
          echo "Start Time: $(date +%s)" && echo "start=$(date +%s)" >> $GITHUB_ENV

      - name: Build go binary
        run: |
          go mod tidy
          CGO_ENABLED=0 go build -buildvcs=false -o ${{ inputs.module-name }}
          du -sh ./${{ inputs.module-name }}
          echo "SEVERITY=INFO" >> $GITHUB_ENV

      - name: Set homerun values
        run: |
          duration=$(($(date +%s) - start))
          echo "BUILD_TIME=${duration}" >> $GITHUB_ENV
          echo "STATUS=SUCCESS" >> $GITHUB_ENV
        env:
          start: ${{ env.start }}

      - name: Send Message To Homerun
        if: always()
        uses: stuttgart-things/github-workflow-templates/actions/send-homerun-message@main
        with:
          url: "https://homerun.homerun-dev.sthings-vsphere.labul.sva.de/generic"
          secretToken: "${{ secrets.HOMERUN_TOKEN }}"
          title: "${{ inputs.module-name }} - [Golang] [build] ${{ env.STATUS }}"
          message: "${{ inputs.module-name }} Golang build BUILD-TIME: ${BUILD_TIME} seconds REPO: https://github.com/${GITHUB_REPOSITORY} BRANCH: ${{ github.head_ref || github.ref_name }}"
          severity: "${{ env.SEVERITY }}"
          artifacts: "${{ inputs.module-name }}"
          tags: "github,${{ inputs.module-name }},golang,build"
          assigneeName: "${GITHUB_ACTOR}"
